"use client";

import React, { forwardRef, useRef, useLayoutEffect, useState, useEffect } from "react";

interface AnimatedBeamProps {
  containerRef: React.RefObject<HTMLDivElement>;
  fromRef: React.RefObject<HTMLDivElement>;
  toRef: React.RefObject<HTMLDivElement>;
  curvature?: number;
  endYOffset?: number;
  reverse?: boolean;
}

const AnimatedBeam: React.FC<AnimatedBeamProps> = ({
  containerRef,
  fromRef,
  toRef,
  curvature = 0,
  endYOffset = 0,
  reverse = false,
}) => {
  const svgRef = useRef<SVGSVGElement>(null);
  const pathRef = useRef<SVGPathElement>(null);
  const [pathLength, setPathLength] = useState(0);
  const [d, setD] = useState("");

  useLayoutEffect(() => {
    if (!containerRef.current || !fromRef.current || !toRef.current) {
      console.log("Referências ausentes:", { containerRef: containerRef.current, fromRef: fromRef.current, toRef: toRef.current });
      return;
    }

    const containerRect = containerRef.current.getBoundingClientRect();
    const fromRect = fromRef.current.getBoundingClientRect();
    const toRect = toRef.current.getBoundingClientRect();

    let x1 = fromRect.left - containerRect.left + fromRect.width / 2;
    let y1 = fromRect.top - containerRect.top + fromRect.height / 2;
    let x2 = toRect.left - containerRect.left + toRect.width / 2;
    let y2 = toRect.top - containerRect.top + toRect.height / 2 + endYOffset;

    if (reverse) {
      [x1, y1, x2, y2] = [x2, y2, x1, y1];
    }

    const dx = x2 - x1;
    const dy = y2 - y1;
    const midX = (x1 + x2) / 2;
    const midY = (y1 + y2) / 2;
    const perpX = -dy;
    const perpY = dx;
    const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);
    const normPerpX = perpLength ? perpX / perpLength : 0;
    const normPerpY = perpLength ? perpY / perpLength : 0;
    const cx = midX + normPerpX * curvature;
    const cy = midY + normPerpY * curvature;

    const newD = `M${x1} ${y1} Q${cx} ${cy} ${x2} ${y2}`;
    setD(newD);
  }, [containerRef, fromRef, toRef, curvature, endYOffset, reverse]);

  useEffect(() => {
    if (pathRef.current && d) {
      setPathLength(pathRef.current.getTotalLength());
    }
  }, [d]);

  return (
    <svg
      ref={svgRef}
      style={{
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        pointerEvents: "none",
      }}
      preserveAspectRatio="none"
    >
      {d && (
        <path
          ref={pathRef}
          d={d}
          fill="none"
          stroke="rgba(0,0,0,0.5)"
          strokeWidth="2"
          strokeDasharray={pathLength}
          strokeDashoffset={pathLength}
          style={{
            animation: "draw 2s linear forwards",
          }}
        />
      )}
    </svg>
  );
};

const Circle = forwardRef<
  HTMLDivElement,
  { className?: string; children?: React.ReactNode }
>(({ className, children }, ref) => {
  return (
    <div
      ref={ref}
      className={`
        z-10 flex size-16 items-center justify-center rounded-full border-2 bg-white p-2 shadow-[0_0_20px_-12px_rgba(0,0,0,0.8)]
        ${className}
      `}
    >
      {children}
    </div>
  );
});

Circle.displayName = "Circle";

export default function Profissionais() {
  const containerRef = useRef<HTMLDivElement>(null);
  const centerRef = useRef<HTMLDivElement>(null);
  const zootecnistaRef = useRef<HTMLDivElement>(null);
  const adestradorRef = useRef<HTMLDivElement>(null);
  const veterinarioRef = useRef<HTMLDivElement>(null);
  const spaHoteisRef = useRef<HTMLDivElement>(null);
  const tutoresRef = useRef<HTMLDivElement>(null);
  const empreendedorRef = useRef<HTMLDivElement>(null);

  return (
    <div
      className="relative flex h-[400px] w-full items-center justify-center overflow-hidden p-10 bg-gray-100"
      ref={containerRef}
    >
      <style>{`
        @keyframes draw {
          to {
            stroke-dashoffset: 0;
          }
        }
      `}</style>
      <div className="flex size-full max-h-[300px] max-w-xl flex-col items-stretch justify-between gap-8">
        <div className="flex flex-row items-center justify-between">
          <Circle ref={zootecnistaRef}>
            <img src="https://via.placeholder.com/100" alt="Zootecnista" className="w-full h-full object-cover rounded-full" onError={() => console.log("Erro ao carregar imagem Zootecnista")} />
          </Circle>
          <Circle ref={adestradorRef}>
            <img src="https://via.placeholder.com/100" alt="Adestrador" className="w-full h-full object-cover rounded-full" onError={() => console.log("Erro ao carregar imagem Adestrador")} />
          </Circle>
        </div>
        <div className="flex flex-row items-center justify-center">
          <Circle ref={centerRef} className="size-20">
            <span className="text-sm font-bold text-center">Eles nos escolheram</span>
          </Circle>
        </div>
        <div className="flex flex-row items-center justify-between">
          <Circle ref={veterinarioRef}>
            <img src="https://via.placeholder.com/100" alt="Veterinário" className="w-full h-full object-cover rounded-full" onError={() => console.log("Erro ao carregar imagem Veterinário")} />
          </Circle>
          <Circle ref={spaHoteisRef}>
            <img src="https://via.placeholder.com/100" alt="Spa & Hotéis" className="w-full h-full object-cover rounded-full" onError={() => console.log("Erro ao carregar imagem Spa & Hotéis")} />
          </Circle>
        </div>
        <div className="flex flex-row items-center justify-between">
          <Circle ref={tutoresRef}>
            <img src="https://via.placeholder.com/100" alt="Tutores" className="w-full h-full object-cover rounded-full" onError={() => console.log("Erro ao carregar imagem Tutores")} />
          </Circle>
          <Circle ref={empreendedorRef}>
            <img src="https://via.placeholder.com/100" alt="Empreendedor" className="w-full h-full object-cover rounded-full" onError={() => console.log("Erro ao carregar imagem Empreendedor")} />
          </Circle>
        </div>
      </div>

      <AnimatedBeam
        containerRef={containerRef}
        fromRef={zootecnistaRef}
        toRef={centerRef}
        curvature={-50}
        endYOffset={-10}
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={adestradorRef}
        toRef={centerRef}
        curvature={50}
        endYOffset={-10}
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={veterinarioRef}
        toRef={centerRef}
        curvature={-50}
        endYOffset={10}
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={spaHoteisRef}
        toRef={centerRef}
        curvature={50}
        endYOffset={10}
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={tutoresRef}
        toRef={centerRef}
        curvature={-50}
        endYOffset={20}
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={empreendedorRef}
        toRef={centerRef}
        curvature={50}
        endYOffset={20}
      />
    </div>
  );
}
